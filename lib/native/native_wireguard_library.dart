// Copyright (c) 2023, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Int Function(ffi.Pointer<wg_device>)>(symbol: 'wg_set_device')
external int wg_set_device(
  ffi.Pointer<wg_device> dev,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Pointer<wg_device>>,
        ffi.Pointer<ffi.Char>)>(symbol: 'wg_get_device')
external int wg_get_device(
  ffi.Pointer<ffi.Pointer<wg_device>> dev,
  ffi.Pointer<ffi.Char> device_name,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'wg_add_device')
external int wg_add_device(
  ffi.Pointer<ffi.Char> device_name,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'wg_del_device')
external int wg_del_device(
  ffi.Pointer<ffi.Char> device_name,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<wg_device>)>(symbol: 'wg_free_device')
external void wg_free_device(
  ffi.Pointer<wg_device> dev,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(symbol: 'wg_list_device_names')
external ffi.Pointer<ffi.Char> wg_list_device_names();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'wg_key_to_base64')
external void wg_key_to_base64(
  ffi.Pointer<ffi.Char> base64,
  ffi.Pointer<ffi.Uint8> key,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Char>)>(
    symbol: 'wg_key_from_base64')
external int wg_key_from_base64(
  ffi.Pointer<ffi.Uint8> key,
  ffi.Pointer<ffi.Char> base64,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Uint8>)>(symbol: 'wg_key_is_zero')
external bool wg_key_is_zero(
  ffi.Pointer<ffi.Uint8> key,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'wg_generate_public_key')
external void wg_generate_public_key(
  ffi.Pointer<ffi.Uint8> public_key,
  ffi.Pointer<ffi.Uint8> private_key,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>(
    symbol: 'wg_generate_private_key')
external void wg_generate_private_key(
  ffi.Pointer<ffi.Uint8> private_key,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>(
    symbol: 'wg_generate_preshared_key')
external void wg_generate_preshared_key(
  ffi.Pointer<ffi.Uint8> preshared_key,
);

/// Cross platform __kernel_timespec
final class timespec64 extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

final class wg_allowedip extends ffi.Struct {
  @ffi.Uint16()
  external int family;

  external UnnamedUnion1 unnamed;

  @ffi.Uint8()
  external int cidr;

  external ffi.Pointer<wg_allowedip> next_allowedip;
}

final class UnnamedUnion1 extends ffi.Union {
  external in_addr ip4;

  external in6_addr ip6;
}

/// Internet address (a structure for historical reasons)
final class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = __uint32_t;
typedef __uint32_t = ffi.UnsignedInt;

/// IPv6 address
final class in6_addr extends ffi.Struct {
  /// 128-bit IP6 address
  external UnnamedUnion2 __u6_addr;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<__uint8_t> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<__uint16_t> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> __u6_addr32;
}

typedef __uint8_t = ffi.UnsignedChar;
typedef __uint16_t = ffi.UnsignedShort;

abstract class wg_peer_flags {
  static const int WGPEER_REMOVE_ME = 1;
  static const int WGPEER_REPLACE_ALLOWEDIPS = 2;
  static const int WGPEER_HAS_PUBLIC_KEY = 4;
  static const int WGPEER_HAS_PRESHARED_KEY = 8;
  static const int WGPEER_HAS_PERSISTENT_KEEPALIVE_INTERVAL = 16;
}

final class wg_endpoint extends ffi.Union {
  external sockaddr addr;

  external sockaddr_in addr4;

  external sockaddr_in6 addr6;
}

/// [XSI] Structure used by kernel to store most addresses.
final class sockaddr extends ffi.Struct {
  /// total length
  @__uint8_t()
  external int sa_len;

  /// [XSI] address family
  @sa_family_t()
  external int sa_family;

  /// [XSI] addr value (actually smaller or larger)
  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = __uint8_t;

/// Socket address, internet style.
final class sockaddr_in extends ffi.Struct {
  @__uint8_t()
  external int sin_len;

  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> sin_zero;
}

typedef in_port_t = __uint16_t;

final class sockaddr_in6 extends ffi.Struct {
  /// length of this struct(sa_family_t)
  @__uint8_t()
  external int sin6_len;

  /// AF_INET6 (sa_family_t)
  @sa_family_t()
  external int sin6_family;

  /// Transport layer port # (in_port_t)
  @in_port_t()
  external int sin6_port;

  /// IP6 flow information
  @__uint32_t()
  external int sin6_flowinfo;

  /// IP6 address
  external in6_addr sin6_addr;

  /// scope zone index
  @__uint32_t()
  external int sin6_scope_id;
}

final class wg_peer extends ffi.Struct {
  @ffi.Int32()
  external int flags;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> public_key;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> preshared_key;

  external wg_endpoint endpoint;

  external timespec64 last_handshake_time;

  @ffi.Uint64()
  external int rx_bytes;

  @ffi.Uint64()
  external int tx_bytes;

  @ffi.Uint16()
  external int persistent_keepalive_interval;

  external ffi.Pointer<wg_allowedip> first_allowedip;

  external ffi.Pointer<wg_allowedip> last_allowedip;

  external ffi.Pointer<wg_peer> next_peer;
}

abstract class wg_device_flags {
  static const int WGDEVICE_REPLACE_PEERS = 1;
  static const int WGDEVICE_HAS_PRIVATE_KEY = 2;
  static const int WGDEVICE_HAS_PUBLIC_KEY = 4;
  static const int WGDEVICE_HAS_LISTEN_PORT = 8;
  static const int WGDEVICE_HAS_FWMARK = 16;
}

final class wg_device extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> name;

  @ffi.Uint32()
  external int ifindex;

  @ffi.Int32()
  external int flags;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> public_key;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> private_key;

  @ffi.Uint32()
  external int fwmark;

  @ffi.Uint16()
  external int listen_port;

  external ffi.Pointer<wg_peer> first_peer;

  external ffi.Pointer<wg_peer> last_peer;
}
